=======================================
== [training] Unit Test with Python3 ==
=======================================
=====================
1. unittest > helloworld example 
test for a piece of code (method, class, group of classes)
unit test returns: pass / fail 
strickly speaking, test should not use fs, database, network 

"test case"  > "test suite" > "test runner": IDE like pycharm or CMD test runner 

eg. 
Files:
phonenumbers/
├── phonebook.py
├── README
└── test_phonebook.py

Run:
cd <path-to-folder phonenumbers> && python3 -m unittest

cat << EOF > phonebook.py
#!/usr/libexec/platform_python
class PhoneBook:
    def __init__(self):
        self.numbers = {}
    def add(self, name, number):
        self.numbers[name] = number
    def lookup(self,name):
        return self.numbers[name]
EOF 

cat << EOF > test_phonebook.py 
import unittest
from phonebook import PhoneBook
class PhoneBookTest(unittest.TestCase):
    def test_lookup_by_name(self):
        phonebook = PhoneBook()
        phonebook.add("Bob", "12345")
        number = phonebook.lookup("Bob")
        self.assertEqual("123", number)
EOF 

=====================
2. unittest > skipping testcase / "test fixture" 
@unittest.skip("WIP")
def test_missing_name(self):

cat << EOF > test_phonebook.py 
import unittest
from phonebook import PhoneBook
class PhoneBookTest(unittest.TestCase):
    def setUp(self) -> None:
        self.phonebook = PhoneBook()
    def tearDown(self) -> None:
        pass
    def test_lookup_by_name(self):
        self.phonebook.add("Bob", "12345")
        number =  self.phonebook.lookup("Bob")
        self.assertEqual("123", number)
    # exception
    @unittest.skip("WIP")
    def test_missing_name(self):
        with self.assertRaises(KeyError):
            self.phonebook.lookup("Missing")
EOF 

=====================
3. unittest > Design with Arrange>Act>Assert
ARRANGE: set up object 
ACT: exercise units under test
ASSERT: make claims 
commonly used assertion methods see: https://docs.python.org/3/library/unittest.html#assert-methods
e.g. 
#!/usr/libexec/platform_python
class PhoneBook:
    def __init__(self):
        self.numbers = {}
    def add(self, name, number):
        self.numbers[name] = number
    def lookup(self,name):
        return self.numbers[name]
    def is_consistent(self):
        for name1, number1 in self.numbers.items():
            for name2, number2 in self.numbers.items():
                if name1 == name2:
                    continue
                if number1.startswith(number2):
                    return False
        return True
        
import unittest
from phonebook import PhoneBook
class PhoneBookTest(unittest.TestCase):
    def setUp(self):
        self.phonebook = PhoneBook()
    def tearDown(self):
        pass
    def test_lookup_by_name(self):
        self.phonebook.add("Bob", "12345")
        number =  self.phonebook.lookup("Bob")
        self.assertEqual("123", number)
    @unittest.skip("WIP")
    def test_missing_name(self):
        with self.assertRaises(KeyError):
            self.phonebook.lookup("Missing")     # exception
    def test_empty_phonebook_is_consistent(self):
        self.phonebook.add("Bob", "12345") # # ASSERT
        self.phonebook.add("Sue", "123")
        self.assertFalse(self.phonebook.is_consistent()) # ACT: self.phonebook.is_consistent()  ASSERT: true or not

================
4. pytest > unit test with pytest 
(function code and test code in same file)
not in standard python distribution
not a member of xUnit family 
popular alternative to unittest

cat << EOF > test_phonebook_pytest.py 
class PhoneBook:
    def __init__(self):
        self.numbers = {}
    def add(self, name, number):
        self.numbers[name] = number
    def lookup(self, name):
        return self.numbers[name]

def test_lookup_by_name():
    phonebook=PhoneBook()
    phonebook.add("Bob", "1234")
    assert "1234" == phonebook.lookup("Bob")
EOF 
Run: python3 -m pip install pytest && python3 -m pytest  # return: =================================== 1 passed in 0.07s ======
